import io
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.units import inch
import base64
import datetime

def get_pdf_download_link(quiz_data, topic, difficulty, language, user_answers=None, show_answers=False):
    """Generate a PDF with quiz questions and optionally answers"""
    buffer = io.BytesIO()
    
    # Create the PDF document
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    
    # Create custom styles
    title_style = ParagraphStyle(
        'Title',
        parent=styles['Heading1'],
        fontSize=16,
        alignment=1,  # Center
        spaceAfter=12
    )
    
    question_style = ParagraphStyle(
        'Question',
        parent=styles['Normal'],
        fontSize=12,
        fontName='Helvetica-Bold',
        spaceAfter=6
    )
    
    option_style = ParagraphStyle(
        'Option',
        parent=styles['Normal'],
        fontSize=11,
        leftIndent=20
    )
    
    answer_style = ParagraphStyle(
        'Answer',
        parent=styles['Normal'],
        fontSize=11,
        textColor=colors.green,
        fontName='Helvetica-Bold'
    )
    
    # Content elements
    elements = []
    
    # Add title and metadata
    current_date = datetime.datetime.now().strftime("%Y-%m-%d")
    elements.append(Paragraph(f"Quiz: {topic}", title_style))
    elements.append(Paragraph(f"Difficulty: {difficulty} | Language: {language} | Date: {current_date}", styles['Normal']))
    elements.append(Spacer(1, 0.2*inch))
    
    # Add instructions
    if not show_answers:
        elements.append(Paragraph("Instructions: Circle the letter of the correct answer for each question.", styles['Italic']))
        elements.append(Spacer(1, 0.2*inch))
    
    # Add questions
    for i, q in enumerate(quiz_data):
        # Question text
        elements.append(Paragraph(f"Question {i+1}: {q['question']}", question_style))
        
        # Options
        if isinstance(q['options'], dict):
            for letter, text in q['options'].items():
                if user_answers and user_answers[i] == letter:
                    # Highlight user's answer
                    if show_answers and letter == q['answer']:
                        # Correct answer
                        elements.append(Paragraph(f"<b>{letter}) {text}</b> ✓", option_style))
                    elif show_answers:
                        # Wrong answer
                        elements.append(Paragraph(f"<b>{letter}) {text}</b> ✗", option_style))
                    else:
                        elements.append(Paragraph(f"<b>{letter}) {text}</b>", option_style))
                else:
                    elements.append(Paragraph(f"{letter}) {text}", option_style))
        
        # Show correct answer if requested
        if show_answers and q['answer']:
            correct_text = q['options'].get(q['answer'], 'Answer not available')
            elements.append(Paragraph(f"Correct Answer: {q['answer']}) {correct_text}", answer_style))
        
        elements.append(Spacer(1, 0.15*inch))
    
    # Footer
    elements.append(Spacer(1, 0.5*inch))
    elements.append(Paragraph("Generated by AI Quiz Generator", styles['Italic']))
    
    # Build PDF
    doc.build(elements)
    
    # Get PDF as base64 string
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

def create_download_button(pdf_data, filename="quiz.pdf", button_text="Download Quiz as PDF"):
    """Create a download button for the PDF"""
    b64_pdf = base64.b64encode(pdf_data).decode()
    href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="{filename}" style="text-decoration:none;">'\
           f'<button style="background-color:#4CAF50;color:white;padding:10px 24px;'\
           f'border:none;border-radius:4px;cursor:pointer;">{button_text}</button></a>'
    return href